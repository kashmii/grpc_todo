package internal

import (
	"context"
	"fmt"
	"log"
	"reflect"
	"sync"

	"connectrpc.com/connect"
	"github.com/google/uuid"

	todov1 "grpc_todo/gen/todo/v1" // generated by protoc-gen-go
)

type ToDoServer struct{
    list sync.Map
}

func (s *ToDoServer) CreateToDo(
    ctx context.Context,
    req *connect.Request[todov1.CreateToDoRequest],
) (*connect.Response[todov1.CreateToDoResponse], error) {
    log.Println("Request headers: ", req.Header())

    id := uuid.New()
    todo := &todov1.ToDo{
        Id: id.String(),
        Title: req.Msg.Title,
        Status: todov1.ToDoStatus_TO_DO_STATUS_OPEN,
    }
    s.list.Store(id, todo)

    res := connect.NewResponse(&todov1.CreateToDoResponse{
        Todo: todo,
    })
    log.Println(res.Msg.Todo.Id)
    log.Println("=====")
    return res, nil
}

func (s *ToDoServer) DeleteToDo(
    ctx context.Context,
    req *connect.Request[todov1.DeleteToDoRequest],
) (*connect.Response[todov1.DeleteToDoResponse], error) {
    log.Println("Request headers: ", req.Header())

    // 受け取ったIDのToDoを削除する
    Id := req.Msg.Id
    s.list.Delete(Id)

    // 削除したToDoのIDを返す
    res := connect.NewResponse(&todov1.DeleteToDoResponse{
        Id: Id,
    })
    log.Println(res.Msg.Id)
    log.Println("=====")
    return res, nil
}

func (s *ToDoServer) UpdateToDo(
    ctx context.Context,
    req *connect.Request[todov1.UpdateToDoRequest],
) (*connect.Response[todov1.UpdateToDoResponse], error) {
    log.Println("Request headers: ", req.Header())

    log.Println("map size: ", getMapSize(&s.list))
    valueType := reflect.TypeOf(req.Msg.Id)
    typeName := valueType.Name()
    log.Printf("変数の型名: %s\n", typeName)

    // 受け取ったIDのToDoを更新する
    data, ok := s.list.Load(req.Msg.Id)
    // if !ok {
	// 	return nil, fmt.Errorf("data not found")
	// }
    todo, ok := data.(*todov1.ToDo)
    if !ok {
        return nil, fmt.Errorf("item is not a todo")
    }
    todo.Status = req.Msg.Status

    // 更新したToDo構造体を返す
    res := connect.NewResponse(&todov1.UpdateToDoResponse{
        Todo: todo,
    })
    return res, nil
}

func getMapSize(m *sync.Map) int {
    count := 0
    m.Range(func(key, value interface{}) bool {
        count++
        log.Printf("Key: %v, Value: %v\n", key, value)
        return true
    })
    return count
}